@using EternalBAND.Models.ViewModel;
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using EternalBAND.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Policy;
@model EternalBAND.Models.ViewModel.ChatViewModel
@inject UserManager<EternalBAND.Models.Users> UserManager
@inject ApplicationDbContext _context
@{
    ViewData["Title"] = "Mesajlar";
}
<link href="~/css/chat.css" rel="stylesheet" type="text/css"/>
<div class="main-content">

    <div class="page-content">

        <section class="page-title-box">
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-md-6">
                        <div class="text-center text-white">
                            <h3 class="mb-4">@ViewData["Title"]</h3>
                            <div class="page-next">

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <div class="position-relative" style="z-index: 1">
            <div class="shape">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 250">
                    <path fill="#FFFFFF" fill-opacity="1"
                          d="M0,192L120,202.7C240,213,480,235,720,234.7C960,235,1200,213,1320,202.7L1440,192L1440,320L1320,320C1200,320,960,320,720,320C480,320,240,320,120,320L0,320Z">
                    </path>
                </svg>
            </div>
        </div>
        <section class="section">
            <div class="container p-0">

                <div class="card">
                    <div class="row g-0">
                        <div class="col-12 col-lg-6 col-xl-4 border-right">
                            @{
                                List<MessageMetadata> chatMetadata = new();
                                if (Model.AllChat != null)
                                {
                                    var allChatMetaData = Model.AllChat.Select(s => s.MessageMetadata);
                                    foreach (var chat in Model.AllChat)
                                    {

                                        var messageSample = chat.Messages.First();
                                        var senderUser = messageSample.SenderUser;
                                        var receiverUser = messageSample.ReceiverUser;
                                        var relatedPost = messageSample.RelatedPost;
                                        var userInfo = senderUser;
                                        if (ViewBag.LoginUserId == senderUser.Id)
                                        {
                                            userInfo = receiverUser;
                                        }

                                        string messageTitle = userInfo.Name == null ? userInfo.Email : userInfo.Name + " " + userInfo.Surname + " - " + relatedPost.Title;

                                        <a href="@Url.Action("ChatIndex","Message",new { userId = userInfo.Id, postId = messageSample.RelatedPostId })" class="list-group-item list-group-item-action border-0">

                                            @*
                                            //  TODO : implement isRead
                                            @if (Model.AllChat.Count(n => n.SenderUserId==userInfo.Id && n.ReceiverUserId == ViewBag.LoginUserId && n.IsRead ==false) > 0)
                                            {
                                                <div class="badge bg-success float-end"> </div>
                                            }
                                            *@
                                            <div class="d-flex align-items-start">
                                                <img src="@userInfo.PhotoPath" class="rounded-circle mr-1" alt="@messageTitle" width="40" height="40">
                                                <div class="flex-grow-1 ms-3 mt-2">
                                                    @messageTitle
                                                </div>
                                            </div>
                                        </a>
                                    }
                                }
                            }

                            <hr class="d-block d-lg-none mt-1 mb-0">
                        </div>
                        <div class="col-12 col-lg-6 col-xl-8">
                            <div class="py-2 px-4 border-bottom d-none d-lg-block">
@*                                <div class="d-flex align-items-center py-1">
                                    @{
                                        var userId = "";

                                    }
                                    @if (ViewBag.ReceiverUserId != null)
                                    {
                                        userId = (string)ViewBag.ReceiverUserId;
                                        var user = Model.CurrentChat.Messages.Any() ?
                                            Model.CurrentChat.Messages.First().ReceiverUser :
                                            await _context.Users.FirstOrDefaultAsync(n => n.Id == userId);
                                       
                                        if (user != null)
                                        {
                                            <div class="position-relative">
                                                <img src="@user.PhotoPath" class="rounded-circle mr-1" alt="@user.Name @user.Surname" width="40" height="40">
                                            </div>
                                            <div class="flex-grow-1 ps-3">
                                                <strong>@user.Name @user.Surname</strong>
                                            </div>
                                        }
                                    }
                                </div>*@
                            </div>

                            <div class="position-relative">
                                <div class="chat-messages p-4">
                                    @if (Model.CurrentChat != null && Model.CurrentChat.Messages.Any())
                                    {
                                        var currentUser = await UserManager.GetUserAsync(User);
                                        foreach (var chat in Model.CurrentChat.Messages.OrderBy(n => n.Date))
                                        {
                                            var receiverUser = chat.ReceiverUser;
                                            var senderUser = chat.SenderUser;
                                            if (senderUser.Id == currentUser.Id)
                                            {
                                                <div class="chat-message-right pb-4">
                                                    <div>
                                                        <img src="@senderUser.PhotoPath" class="rounded-circle mr-1" alt="@senderUser.Name @senderUser.Surname" width="40" height="40">
                                                        <div class="text-muted small text-nowrap mt-2">@chat.Date.ToString("dd/MM/yyyy HH:mm")</div>
                                                    </div>
                                                    <div class="flex-shrink-1 bg-light rounded py-2 px-3 ms-3">
                                                        <div class="fw-bold mb-1">Sen</div>
                                                        @chat.Message
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="chat-message-left pb-4">
                                                    <div>
                                                        <img src="@senderUser.PhotoPath" class="rounded-circle mr-1" alt="@senderUser.Name @senderUser.Surname" width="40" height="40">
                                                        <div class="text-muted small text-nowrap mt-2">@chat.Date.ToString("dd/MM/yyyy HH:mm")</div>
                                                    </div>
                                                    <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                                                        <div class="fw-bold mb-1">@senderUser.Name @senderUser.Surname</div>
                                                        @chat.Message
                                                    </div>
                                                </div>
                                            }
                                        }
                                    }

                                </div>
                            </div>
                            @if (Model.CurrentChat != null)
                            {
                                var userinfo = Model.CurrentChat.MessageMetadata.RecipientsId.First(s => s != ViewBag.LoginUserId);
                                <div class="flex-grow-0 py-3 px-4 border-top">
                                    <div class="input-group">
                                        <input type="text" id="messageText" class="form-control" placeholder="Mesajınızı buraya yazabilirsiniz.">
                                        @*TODO : use asp-action and route rather than custom JS call*@
                                        <button class="btn btn-primary" id="messageSendButton" onclick="Send('@userinfo','@Model.CurrentChat.MessageMetadata.PostId')">Gönder</button>
                                    </div>
                                </div>
                            }

                        </div>
                    </div>
                </div>
            </div>
        </section>

    </div>

    <partial name="PartialViews/_SwitcherAndTopPartial"/>
</div>
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script>
    

    var connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

    // receives broadcasted message from server side
    connection.on("ReceiveMessage", function (signalRMessageContract) {

        var chat = JSON.parse(signalRMessageContract);
        var senderUser = chat.SenderUser;
        var receiverUserId = chat.ReceiverUserId;
        var currentUserId = @Html.Raw(Json.Serialize(ViewBag.LoginUserId));
        if (receiverUserId != currentUserId && senderUser.Id != currentUserId)
        {
            // we will pass signalR if current user is not a recipent for message box
            return;
        }

        var correctDate = formatDate(new Date(chat.Date));

        if (senderUser.Id == currentUserId)
        {
            // Logic for messages sent by the current user
            var div = document.createElement("div");
            div.innerHTML = `
                <div class="chat-message-right pb-4">
                    <div>
                        <img src="${senderUser.PhotoPath}" class="rounded-circle mr-1" alt="${senderUser.Name} ${senderUser.Surname}" width="40" height="40">
                            <div class="text-muted small text-nowrap mt-2">${correctDate}</div>
                    </div>
                    <div class="flex-shrink-1 bg-light rounded py-2 px-3 ms-3">
                        <div class="fw-bold mb-1">Sen</div>
                        ${chat.Message}
                    </div>
                </div>`;
        
        } 
            
        else {
                    // Logic for messages sent by other users
            var div = document.createElement("div");
            div.innerHTML = `
            <div class="chat-message-left pb-4">
                <div>
                    <img src="${senderUser.PhotoPath}" class="rounded-circle mr-1" alt="${senderUser.Name} ${senderUser.Surname}" width="40" height="40">
                        <div class="text-muted small text-nowrap mt-2">${correctDate}</div>
                </div>
                <div class="flex-shrink-1 bg-light rounded py-2 px-3 mr-3">
                    <div class="fw-bold mb-1">${senderUser.Name} ${senderUser.Surname}</div>
                    ${chat.Message}
                </div>
            </div>`;
        }
        document.getElementsByClassName("chat-messages")[0].appendChild(div);
    });



    connection.start().catch(function (err) {
        return console.error(err.toString());
    });

    function Send(id,postId){
        var text = $("#messageText").val();
        $.post("/Message/SendMessage/",
        {
            id: id,
            message: text,
            postId: postId
        },
        function (data) {});
    }

    function formatDate(date) {
        var day = padZero(date.getDate());
        var month = padZero(date.getMonth() + 1); // Month is zero-based
        var year = date.getFullYear();
        var hours = padZero(date.getHours());
        var minutes = padZero(date.getMinutes());

        return day + '/' + month + '/' + year + ' ' + hours + ':' + minutes;
    }

    // Function to pad single-digit numbers with a leading zero
    function padZero(number) {
        return (number < 10 ? '0' : '') + number;
    }

</script>